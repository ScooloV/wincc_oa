%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: WinCC
file_extensions:
  - ctl
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.ctl

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|return|switch|while'
  basic_types: 'bool|char|double|enum|float|dyn_float|int|dyn_int|long|short|signed|struct|typedef|union|unsigned|void|string|dyn_string|dyn_dyn_string|anytype|dyn_anytype|mapping|shape|time|dyn_mapping|dyn_errClass|mixed|va_list|va_arg|va_end|va_start'
  before_tag: 'struct|class|enum'
  storage_classes: 'static|extern|register'
  type_qualifier: 'const|private|public|global'
  modifiers: '{{storage_classes}}|{{type_qualifier}}'
  non_func_keywords: 'if|for|switch|while'

contexts:
  main:
    - include: global

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.ctl
      captures:
        1: meta.toc-list.banner.block.ctl
    - match: /\*
      scope: punctuation.definition.comment.ctl
      push:
        - meta_scope: comment.block.ctl
        - match: \*/
          scope: punctuation.definition.comment.ctl
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.ctl
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.ctl
      captures:
        1: meta.toc-list.banner.line.ctl
    - match: //
      scope: punctuation.definition.comment.ctl
      push:
        - meta_scope: comment.line.double-slash.ctl
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.ctl
        - match: \n
          pop: true

  strings:
    - match: '(")'
      captures:
        1: punctuation.definition.string.begin.ctl
      push:
        - meta_scope: string.quoted.double.ctl
        - match: '"'
          scope: punctuation.definition.string.end.ctl
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(')"
      captures:
        1: punctuation.definition.string.begin.ctl
      push:
        - meta_scope: string.quoted.single.ctl
        - match: "'"
          scope: punctuation.definition.string.end.ctl
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.ctl
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.ctl
    - match: \\.
      scope: invalid.illegal.unknown-escape.ctl

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.ctl

  keywords:
    - match: \b({{control_keywords}})\b
      scope: keyword.control.ctl

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.ctl

  constants:
    - match: \b(true|false|TRUE|FALSE)\b
      scope: constant.language.ctl
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.ctl


  types:
    - match: \b({{basic_types}}|{{before_tag}})\b
      scope: storage.type.ctl
    - match: \b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|ptrdiff_t)\b
      scope: support.type.sys-types.ctl
    - match: \b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b
      scope: support.type.pthread.ctl
    - match: \b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      scope: support.type.mac-classic.ctl

  numbers:
    - match: '\b((0(x|X)[0-9a-fA-F]*(\.[0-9a-fA-F]+p-?\d+)?)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([fF]|(l{1,2}|L{1,2})[uU]?|[uU](l{0,2}|L{0,2}))?\b'
      scope: constant.numeric.ctl

  operators:
    - match: '->'
      scope: punctuation.accessor.ctl
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.ctl
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.ctl
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.ctl
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.ctl
    - match: \=
      scope: keyword.operator.assignment.ctl
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.ctl
    - match: '\.\.\.'
      scope: keyword.operator.variadic.ctl

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.ctl
        2: variable.other.member.ctl
    - match: \.\.(?!\.)
      scope: invalid.illegal.syntax.ctl
    - match: \.(?!\.)
      scope: punctuation.accessor.ctl

  label:
    - match: '^\s*((?!default){{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.ctl
        2: punctuation.separator.ctl

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.ctl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.ctl
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.ctl
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.ctl

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.ctl
      push:
        - meta_scope: comment.block.ctl
        - match: '\\$\n'
          scope: punctuation.separator.continuation.ctl
        - match: \*/
          scope: punctuation.definition.comment.ctl
          pop: true
    - match: //
      scope: punctuation.definition.comment.ctl
      push:
        - meta_scope: comment.line.double-slash.ctl
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.ctl
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.ctl
      captures:
        1: meta.preprocessor.ctl
        2: keyword.control.import.pragma.ctl
        3: meta.toc-list.pragma-mark.ctl

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.ctl

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: access
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.ctl
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.ctl

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.ctl

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.ctl
    # If a struct/union/enum followed by a name that is not a macro or declsp.ctl
    # then this is likely a return type of a function. This is uncommon.
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            (?![[:upper:][:digit:]_]+\b|__declspec)
            {{identifier}}
            (\s+{{identifier}}(?!\s*[{=;])|\s*\*+)
          )
        )
      captures:
        1: storage.type.ctl
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.ctl
        2: meta.group.c punctuation.section.group.begin.ctl
      push:
        - meta_scope: meta.function-call.ctl
        - meta_content_scope: meta.group.ctl
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.ctl
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.ctl
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))(?=\s+)'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.c entity.name.function.ctl
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.ctl
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.ctl
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.ctl
            - match : \)
              scope: punctuation.section.group.end.ctl
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.ctl
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.ctl
            - include: expressions
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.ctl
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.ctl
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.ctl
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.ctl
      set:
        - meta_content_scope: meta.function.c meta.block.ctl
        - match: '\}'
          scope: meta.function.c meta.block.c punctuation.section.block.end.ctl
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    # Detect variable type definitions using struct/enum/union followed by a tag
    - match: '\b({{before_tag}})(?=\s+{{identifier}}\s+{{identifier}}\s*[=;\[])'
      scope: storage.type.ctl
    - match: '\bstruct\b'
      scope: storage.type.ctl
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: storage.type.ctl
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.ctl
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.ctl
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.ctl
    - match: '{{identifier}}'
      scope: entity.name.struct.ctl
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.ctl
      set:
        - meta_content_scope: meta.struct.c meta.block.ctl
        - match: '\}'
          scope: meta.struct.c meta.block.c punctuation.section.block.end.ctl
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.ctl
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.ctl
    - match: '{{identifier}}'
      scope: entity.name.enum.ctl
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.ctl
      set:
        - meta_content_scope: meta.enum.c meta.block.ctl
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.c meta.block.c punctuation.section.block.end.ctl
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.ctl
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.ctl
    - match: '{{identifier}}'
      scope: entity.name.union.ctl
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.ctl
      set:
        - meta_content_scope: meta.union.c meta.block.ctl
        - match: '\}'
          scope: meta.union.c meta.block.c punctuation.section.block.end.ctl
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - match: '(?=\b(?:{{before_tag}}|{{control_keywords}})\b)'
      pop: true
    - include: modifiers-parens
    - include: modifiers
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.ctl
      push:
        - meta_scope: meta.block.ctl
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.ctl
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.ctl
      push:
        - meta_scope: meta.group.ctl
        - match: \)
          scope: punctuation.section.group.end.ctl
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.ctl
      push:
        - meta_scope: meta.brackets.ctl
        - match: \]
          scope: punctuation.section.brackets.end.ctl
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.ctl
      push:
        - match: ':'
          scope: punctuation.separator.ctl
          pop: true
        - include: expressions

  modifiers-parens:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.ctl
        2: meta.group.c punctuation.section.group.begin.ctl
      push :
        - meta_scope: meta.attribute.ctl
        - meta_content_scope: meta.group.ctl
        - include: parens
        - include: strings
        - match: \)\)
          scope: meta.group.c punctuation.section.group.end.ctl
          pop: true
    - match: \b(__declspec)(\()
      captures:
        1: storage.modifier.ctl
        2: meta.group.c punctuation.section.group.begin.ctl
      push:
        - meta_content_scope: meta.group.ctl
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.ctl
          pop: true
        - match: '\b(align|allocate|code_seg|property|uuid)\b\s*(\()'
          captures:
            1: storage.modifier.ctl
            2: meta.group.c punctuation.section.group.begin.ctl
          push:
            - meta_content_scope: meta.group.ctl
            - match: '\)'
              scope: meta.group.c punctuation.section.group.end.ctl
              pop: true
            - include: numbers
            - include: strings
            - match: \b(get|put)\b
              scope: variable.parameter.ctl
            - match: ','
              scope: punctuation.separator.ctl
            - match: '='
              scope: keyword.operator.assignment.ctl
        - match: '\b(appdomain|deprecated|dllimport|dllexport|jintrinsic|naked|noalias|noinline|noreturn|nothrow|novtable|process|restrict|safebuffers|selectany|thread)\b'
          scope: constant.other.ctl

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.ctl
        2: meta.group.c punctuation.section.group.begin.ctl
      push:
        - meta_content_scope: meta.group.ctl
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.ctl
          pop: true
        - include: expressions

  typedef:
    - match: \btypedef\b
      scope: storage.type.ctl
      push:
        - match: ({{identifier}})?\s*(?=;)
          captures:
            1: entity.name.type.typedef.ctl
          pop: true
        - match: \b(struct)\s+({{identifier}})
          captures:
            1: storage.type.ctl
        - include: expressions

  function-call:
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.ctl
        - match: '{{identifier}}'
          scope: variable.function.ctl
        - match: '\('
          scope: meta.group.c punctuation.section.group.begin.ctl
          set:
            - meta_content_scope: meta.function-call.c meta.group.ctl
            - match : \)
              scope: meta.function-call.c meta.group.c punctuation.section.group.end.ctl
              pop: true
            - include: expressions

  preprocessor-expressions:
    - match: '#uses'
      scope: keyword.control.wincc
